package com.example.accessingdatamysql.api.controllers;

import com.example.accessingdatamysql.dataAccess.abstracts.DhtDao;
import com.example.accessingdatamysql.entity.concrate.sensor.Dht11;
import com.fasterxml.jackson.annotation.JsonFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.stereotype.Controller;
import org.springframework.stereotype.Repository;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.List;


@CrossOrigin(maxAge = 3600)
@Controller	// This means that this class is a Controller
@RequestMapping(path="/api/dht") // This means URL's start with /demo (after Application path)
@Repository
public class Dht11TemperatureController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private DhtDao _dhtDao;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String heat
            , @RequestParam String humidity, @RequestParam LocalDateTime date) {

        Dht11 dht11 = new Dht11();
        dht11.setHeat(heat);
        dht11.setHumidity(humidity);
        dht11.setDate(date);
        _dhtDao.save(dht11);
        return "Saved";
    }

    @CrossOrigin("http://localhost:4200")
    @GetMapping(path="/all")
    public @ResponseBody Iterable<Dht11> getAllDhtData() {
        return _dhtDao.findAll();
    }

    @GetMapping(path="/getbyday")
    public @ResponseBody
    List<Dht11> getbyday(@RequestParam(name = "d1") @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss") LocalDateTime d1,@RequestParam(name = "d2") @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss") LocalDateTime d2){
        return _dhtDao.findAllByDateLessThanEqualAndDateGreaterThanEqual(d1, d2);
    }
//    @GetMapping(path = "/getByDay")
//    public String getDhtByDate(@RequestParam(name = "d1") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime d1, @RequestParam(name = "d2") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime d2){
//    }
}
